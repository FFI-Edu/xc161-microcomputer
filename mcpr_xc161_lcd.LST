C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/21/2013 17:02:41 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE MCPR_XC161_LCD
OBJECT MODULE PLACED IN mcpr_xc161_lcd.OBJ
COMPILER INVOKED BY: C:\Programme\Mikrocom\Keil\C166\BIN\C166.EXE mcpr_xc161_lcd.c MODV2 COMPACT BROWSE MODV2 DEBUG TABS
                    -(2) 

 stmt lvl     source

    1         #include "mcpr_xc161_lcd.h"
    2         #include <string.h>
    3         
    4         uint32 lcd_on_until = 0;
    5         
    6         void lcd_init() {
    7  1         wait(40000); //40ms warten nach power on
    8  1         lcd_write(0x0, 0x30);
    9  1         wait(5000);
   10  1         lcd_write(0x0, 0x30);
   11  1         wait(100);
   12  1         lcd_write(0x0, 0x30);
   13  1         wait(100);
   14  1         lcd_write(0x0, 0x38);
   15  1         lcd_write(0x0, 0x08);
   16  1         lcd_write(0x0, 0x01);
   17  1         wait(5000);
   18  1         lcd_write(0x0, 0x06);  
   19  1         lcd_write(0x0, 0x0C);
   20  1         lcd_write(0x0, 0x80);
   21  1      }
   22         
   23         void lcd_backlight_controller(uint16 ks, uint8* lkey_state_up, uint8* lkey_state_down, uint8* last_lcd){    
             -                          
   24  1         uint8 nkey_state_up   = ((uint8) ks);
   25  1         uint8 nkey_state_down = ((uint8) (ks>>8));
   26  1         if( nkey_state_up != *lkey_state_up || nkey_state_down != *lkey_state_down ){
   27  2            lcd_on_until = timer_count+10000;
   28  2         }
   29  1         *lkey_state_up   = nkey_state_up;
   30  1         *lkey_state_down = nkey_state_down;
   31  1         if( lcd_on_until > timer_count )
   32  1           lcd_backlight(1);
   33  1         else
   34  1           lcd_backlight(0);
   35  1              
   36  1      }
*** WARNING C47 IN LINE 23 OF mcpr_xc161_lcd.c: 'last_lcd': unreferenced parameter
   37         
   38         /*void lcd_backlight_controller(uint16 ks, uint8* lkey_state_up, uint8* lkey_state_down, uint8* last_lcd){
             -                              
   39            uint8 nkey_state_up   = ((uint8) ks);
   40            uint8 nkey_state_down = ((uint8) (ks>>8));
   41            if( nkey_state_up > *lkey_state_up ){
   42               if( (*last_lcd & 0x01) > 0 ){
   43                  lcd_backlight(0);
   44                  *last_lcd = *last_lcd & (~0x01);
   45               }else{
   46                  lcd_backlight(1);
   47                  *last_lcd = *last_lcd | 0x01;
   48               }
   49            }
   50            if( nkey_state_down < *lkey_state_down ){
   51               if( (*last_lcd & 0x02) > 0 ){
C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/21/2013 17:02:41 PAGE 2   

   52                  lcd_backlight(0);
   53                  *last_lcd = *last_lcd & (~0x02);
   54               }else{
   55                  lcd_backlight(1);
   56                  *last_lcd = *last_lcd | 0x02;
   57               }
   58            }
   59            *lkey_state_up   = nkey_state_up;
   60            *lkey_state_down = nkey_state_down;
   61                 
   62         }*/
   63         
   64         void lcd_backlight (uint8 state) {
   65  1         DP7   = 0x00F0;
   66  1         P7_P4 = state;
   67  1      }
   68         
   69         void lcd_write(uint8 data_type, uint8 data_byte){
   70  1         DP7_P6= 0x1;
   71  1         P7_P6 = 0x0;
   72  1         DP7_P5= 0x1;
   73  1         P7_P5 = 0x1;
   74  1         DP7_P7= 0x1;
   75  1         P7_P7 = data_type;
   76  1         IC3  = data_byte;
   77  1         wait(20);
   78  1         P7_P5 = 0x0;
   79  1         wait(20);
   80  1      }
   81         
   82         void lcd_setline(uint8 line) {
   83  1         switch(line) {
   84  2            case 0: lcd_write(0x0, 0x80); break;
   85  2            case 1: lcd_write(0x0, 0xC0); break;
   86  2            case 2: lcd_write(0x0, 0x94); break;
   87  2            case 3: lcd_write(0x0, 0xD4); break;
   88  2            default: break;
   89  2         }
   90  1      }
   91         
   92         void lcd_sendstring(uint8 line,  char* str) {
   93  1         uint8 i = 0;
   94  1         uint32 count = 20;
   95  1         lcd_setline(line);
   96  1         while(i<21 && str[i] != '\0') {
   97  2            lcd_write(0x1, str[i]);
   98  2            count--;
   99  2            i++;
  100  2         }
  101  1         while(count>0){
  102  2            lcd_write(0x1, 0x20); //0x20 = ASCII SPACE
  103  2            count--;
  104  2         }
  105  1              
  106  1      }
  107         
  108         void lcd_writestatus(uint32 cycle, uint16 temp){
  109  1         char message[21];
  110  1         
  111  1         sprintf (message, "Temp: %d", temp);
*** WARNING C140 IN LINE 111 OF mcpr_xc161_lcd.c: 'sprintf' undefined; assuming 'extern int sprintf()'
  112  1         lcd_sendstring(0, message);
C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/21/2013 17:02:41 PAGE 3   

  113  1         
  114  1         sprintf (message, "Freq: %ld", cycle);
  115  1         lcd_sendstring(1, message);
  116  1         
  117  1         if( (temp > MAX_TEMP || temp < MIN_TEMP) )
  118  1            sprintf (message, "WARNING: TEMP", 0x0);
  119  1         else
  120  1            sprintf (message, " ", 0x0);
  121  1         lcd_sendstring(2, message);
  122  1         
  123  1      }
  124         
  125         void wait(uint16 us) {
  126  1         uint32 t = T_WAIT * (uint32)us;
  127  1         uint32 i = 0;
  128  1         for(i=0; i<=t; i++);
  129  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         666     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =          35     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           4     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           8     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
