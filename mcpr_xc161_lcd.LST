C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/28/2013 17:25:08 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE MCPR_XC161_LCD
OBJECT MODULE PLACED IN mcpr_xc161_lcd.OBJ
COMPILER INVOKED BY: C:\Programme\Mikrocom\Keil\C166\BIN\C166.EXE mcpr_xc161_lcd.c MODV2 COMPACT BROWSE MODV2 DEBUG

 stmt lvl     source

    1         #include "mcpr_xc161_lcd.h"
    2         #include <string.h>
    3         
    4         uint32 lcd_on_until = 0;
    5         
    6         void lcd_init() {
    7  1         wait(40000); //40ms warten nach power on
    8  1         lcd_write(0x0, 0x30);
    9  1         wait(5000);
   10  1         lcd_write(0x0, 0x30);
   11  1         wait(100);
   12  1         lcd_write(0x0, 0x30);
   13  1         wait(100);
   14  1         lcd_write(0x0, 0x38);
   15  1         lcd_write(0x0, 0x08);
   16  1         lcd_write(0x0, 0x01);
   17  1         wait(5000);
   18  1         lcd_write(0x0, 0x06);        
   19  1         lcd_write(0x0, 0x0C);
   20  1         lcd_write(0x0, 0x80);
   21  1      }
   22         
   23         void lcd_backlight_controller(uint16 ks, uint8* lkey_state_up, uint8* lkey_state_down){                                                                                                                 
   24  1         uint8 nkey_state_up   = ((uint8) ks);
   25  1         uint8 nkey_state_down = ((uint8) (ks>>8));
   26  1         if( nkey_state_up != *lkey_state_up || nkey_state_down != *lkey_state_down ){
   27  2            lcd_on_until = timer_back+100000;
   28  2         }
   29  1         *lkey_state_up   = nkey_state_up;
   30  1         *lkey_state_down = nkey_state_down;
   31  1               if( lcd_on_until > timer_back )
   32  1                       lcd_backlight(1);
   33  1               else {  
   34  2                       lcd_backlight(0); 
   35  2                       timer_back = 0;
   36  2                       lcd_on_until = 0;
   37  2               }
   38  1                                      
   39  1      }
   40         
   41         /*void lcd_backlight_controller(uint16 ks, uint8* lkey_state_up, uint8* lkey_state_down, uint8* last_lcd){
             -                                                                                                                        
   42            uint8 nkey_state_up   = ((uint8) ks);
   43            uint8 nkey_state_down = ((uint8) (ks>>8));
   44            if( nkey_state_up > *lkey_state_up ){
   45               if( (*last_lcd & 0x01) > 0 ){
   46                  lcd_backlight(0);
   47                  *last_lcd = *last_lcd & (~0x01);
   48               }else{
   49                  lcd_backlight(1);
   50                  *last_lcd = *last_lcd | 0x01;
   51               }
   52            }
   53            if( nkey_state_down < *lkey_state_down ){
   54               if( (*last_lcd & 0x02) > 0 ){
C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/28/2013 17:25:08 PAGE 2   

   55                  lcd_backlight(0);
   56                  *last_lcd = *last_lcd & (~0x02);
   57               }else{
   58                  lcd_backlight(1);
   59                  *last_lcd = *last_lcd | 0x02;
   60               }
   61            }
   62            *lkey_state_up   = nkey_state_up;
   63            *lkey_state_down = nkey_state_down;
   64                                         
   65         }*/
   66         
   67         void lcd_backlight (uint8 state) {
   68  1               DP7   = 0x00F0;
   69  1         P7_P4 = state;
   70  1      }
   71         
   72         void lcd_write(uint8 data_type, uint8 data_byte){
   73  1         DP7_P6= 0x1;
   74  1         P7_P6 = 0x0;
   75  1         DP7_P5= 0x1;
   76  1         P7_P5 = 0x1;
   77  1         DP7_P7= 0x1;
   78  1         P7_P7 = data_type;
   79  1         IC3  = data_byte;
   80  1         wait(20);
   81  1         P7_P5 = 0x0;
   82  1         wait(20);
   83  1      }
   84         
   85         void lcd_setline(uint8 line) {
   86  1         switch(line) {
   87  2            case 0: lcd_write(0x0, 0x80); break;
   88  2            case 1: lcd_write(0x0, 0xC0); break;
   89  2            case 2: lcd_write(0x0, 0x94); break;
   90  2            case 3: lcd_write(0x0, 0xD4); break;
   91  2            default: break;
   92  2         }
   93  1      }
   94         
   95         void lcd_sendstring(uint8 line,  char* str) {
   96  1         uint8 i = 0;
   97  1         uint32 count = 20;
   98  1         lcd_setline(line);
   99  1         while(i<21 && str[i] != '\0') {
  100  2            lcd_write(0x1, str[i]);
  101  2            count--;
  102  2            i++;
  103  2         }
  104  1         while(count>0){
  105  2            lcd_write(0x1, 0x20); //0x20 = ASCII SPACE
  106  2            count--;
  107  2         }
  108  1                                      
  109  1      }
  110         
  111         void lcd_writestatus(uint32 cycle, uint16 temp){
  112  1         char message[21];
  113  1         
  114  1         sprintf (message, "Temp: %d", temp);
*** WARNING C140 IN LINE 114 OF mcpr_xc161_lcd.c: 'sprintf' undefined; assuming 'extern int sprintf()'
  115  1         message[9] = message[8];
C166 COMPILER V7.53.0.0, MCPR_XC161_LCD                                                    11/28/2013 17:25:08 PAGE 3   

  116  1         message[8] = '.';
  117  1         message[10] = '\0';
  118  1         lcd_sendstring(0, message);
  119  1         
  120  1         sprintf (message, "Freq: %ld", cycle);
  121  1         lcd_sendstring(1, message);
  122  1         
  123  1         if( (temp > MAX_TEMP || temp < MIN_TEMP) )
  124  1            sprintf (message, "WARNING: TEMP", 0x0);
  125  1         else
  126  1            sprintf (message, " ", 0x0);
  127  1         
  128  1         lcd_sendstring(2, message);
  129  1         
  130  1         lcd_sendstring(3, " ");
  131  1         
  132  1      }
  133         
  134         void wait(uint16 us) {
  135  1         uint32 t = T_WAIT * (uint32)us;
  136  1         uint32 i = 0;
  137  1         for(i=0; i<=t; i++);
  138  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         718     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =          35     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           4     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           8     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
